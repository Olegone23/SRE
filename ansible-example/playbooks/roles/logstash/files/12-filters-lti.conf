filter {
	if [type] == "ltiLog" {
		grok {
		  #using NOTSPACE to detect logger as weird things like
		  #"org.apache.catalina.core.ContainerBase.[Catalina].[10.0.0.0].[/author-services]" are possible
		  match => {
		  	"message" => "(?m)\[%{TIMESTAMP_ISO8601:time}\] \[(?<thread>.+?)\] %{WORD:level} %{NOTSPACE:logger} -(\s*)?(\[%{DATA:meta}\](?= \w))(\s*)?%{GREEDYDATA:msg}"
		  }
		}

		grok {
		    match => {
			"path" => "%{GREEDYDATA}/%{GREEDYDATA:application}\.log"
		    }
		}
		if [meta] {
			#split meta block into key-value pairs
			ruby {
			    code => "
		            fieldArray = event.get('meta').split(/\]\s*?\[/)
		            for field in fieldArray
		            	field = field.strip! || field # in case of tailing spaces
		                result = field.split('::')
		                event.set(result[0], result[1])
		            end
			    "
			}
			mutate {
		        rename => { "Transaction-ID" => "transactionId" }
		    }
		}
		date {
			match => [ "time", "ISO8601"]
		}

		if [msg] { #if parse successful
			mutate {
		        replace => [ "message", "%{msg}" ]
		    }
		}

		mutate {
	        remove_field => ["msg", "time", "meta", "path"]
	        add_field => {"applicationEnvironment" => "${LS_APP_ENV}"}
	        add_field => {"instanceId" => "${AWS_INSTANCE_ID}"}
	    }
    }
}